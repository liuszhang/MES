@model DevExpress.Web.Demos.ErrorMessageModel
           
@functions{
    object GetDemoProducts() {
        return DemosModel.Instance.DemoProducts.Where(product => !product.IsRootDemo).OrderBy(product => product.NavItemTitle)
            .Select(product => new DevExpress.Web.Demos.ErrorMessageModel() { Title = product.NavItemTitle, NavigateUrl = Utils.GenerateDemoUrl(product.Intro) });
    }
}

<div class="ErrorContainer">
    <div class="MainMessage">
        @Html.Raw(HttpUtility.HtmlDecode((string)ViewData["MainMessage"]))
    </div>
    <div class="Details">
        @Html.Raw(HttpUtility.HtmlDecode((string)ViewData["Details"]))    
    </div>
    <div>
      @if (DemosModel.Instance.DemoProducts.Count > 1) {
            @Html.DevExpress().DataView(dv =>
          {          
              dv.Name = "dvProductLinks";
              dv.EnableTheming = false;
              dv.AllowPaging = false;
              dv.SettingsTableLayout.ColumnCount = 3;          
              dv.SetItemTemplateContent(s => {
                  var title = s.EvalDataItem("Title");
                  var navigateUrl = Url.Content(s.EvalDataItem("NavigateUrl").ToString());
                  ViewContext.Writer.Write(string.Format("<a href=\"{0}\">{1}</a>", navigateUrl, title));
              });
              dv.ControlStyle.ItemSpacing = Unit.Pixel(0);
              dv.ControlStyle.CssClass = "ProductsView";
              dv.Styles.Item.CssClass = "Product";
              dv.Styles.EmptyItem.CssClass = "EmptyProduct";          
          }).Bind(GetDemoProducts()).GetHtml()
      }
    </div>
</div>
